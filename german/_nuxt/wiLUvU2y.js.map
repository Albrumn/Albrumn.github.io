{"version":3,"file":"wiLUvU2y.js","sources":["../../../../stores/request.ts","../../../../stores/page.ts"],"sourcesContent":["import { supabase } from '~/supabase';\r\nimport type { Employee, Location, Req } from '~/types';\r\nimport { useAuthStore } from '#imports';\r\n\r\nexport const useRequestStore = defineStore('requestStore', () => {\r\n    const { txt } = storeToRefs(useAppStore());\r\n    const { active_emp_id, isManager, profile } = storeToRefs(useAuthStore());\r\n    const _isPending = ref<boolean>(false);\r\n    const isReqPending = ref<boolean>(false);\r\n    const requests = ref<Array<Req>>([]);\r\n    const requests_cnt = ref<number>(0);\r\n    const statuses = computed( () => [\r\n        { id: 1, name: txt.value.pending },\r\n        { id: 2, name: txt.value.approved },\r\n        { id: 3, name: txt.value.denied }\r\n    ]);\r\n\r\n    const isPending = computed(() => { return _isPending.value });\r\n    \r\n    const params = ref<any>({\r\n        isAsc: true,\r\n        orderBy: 'created_at',\r\n        page: 1,\r\n        perPage: 10,\r\n        search: ''\r\n    });\r\n\r\n    const startIndex = computed(() => { return (params.value.page - 1) * params.value.perPage; });\r\n    const endIndex = computed(() => { return startIndex.value + params.value.perPage - 1 });\r\n\r\n    const blankRequest = computed((): Req => {\r\n        let tomorrow = new Date();\r\n        tomorrow.setDate(tomorrow.getDate() + 1);\r\n        tomorrow.setHours(0, 0, 0, 0);\r\n        const start = new Date(tomorrow);\r\n        const end = new Date(tomorrow);\r\n        start.setHours(0, 0, 0, 0);\r\n        end.setHours(23, 45, 0, 0)\r\n        return {\r\n            id: 0,\r\n            created_by: profile.value.account_id,\r\n            created_at: new Date(),\r\n            modified_at: new Date(),\r\n            employee: {} as Employee,\r\n            location: {} as Location,\r\n            status: 1,\r\n            start: start,\r\n            end: end,\r\n            note: ''\r\n        };\r\n    });\r\n\r\n    function $reset(): void {\r\n        _isPending.value = false;\r\n        requests.value = [];\r\n        requests_cnt.value = 0;\r\n        params.value = {\r\n            isAsc: true,\r\n            orderBy: 'created_at',\r\n            page: 1,\r\n            perPage: 10,\r\n            search: ''\r\n        };\r\n    }\r\n\r\n    async function fetchRequests(location_id: number): Promise<string> {\r\n        if (_isPending.value) return 'Error:  Please try again';\r\n        _isPending.value = true;\r\n\r\n        let msg = '';\r\n\r\n        if (isManager.value) {\r\n\r\n            const { count: pendingReqCnt } = await supabase\r\n                .from('request')\r\n                .select(undefined, { count: 'exact', head: false })\r\n                .eq('location_id', location_id)\r\n                .eq('employee_id', active_emp_id.value)\r\n                .eq('status', 1);\r\n            \r\n            if (pendingReqCnt) { isReqPending.value = pendingReqCnt > 0 }\r\n            else { isReqPending.value = false; }\r\n        }\r\n\r\n        let query = supabase\r\n            .from('request')\r\n            .select('id, created_by, created_at, modified_at, employee:employee_id(*), location:location_id(*), status, start, end, note', { count: 'exact', head: false })\r\n            .eq('location_id', location_id);\r\n\r\n        if (!isManager.value) {\r\n            query = query.eq('employee_id', active_emp_id.value);\r\n        }\r\n\r\n        query = query.order('created_at', { ascending: true })\r\n                     .range(startIndex.value, endIndex.value);\r\n        \r\n        const { data, count, error } = await query;\r\n        \r\n        if (error) {\r\n            msg = error.message as string;\r\n        }\r\n        else if (data) {\r\n            requests.value = (data as Array<Req>).map(d => {\r\n                return {\r\n                    ...d,\r\n                    start: new Date(d.start),\r\n                    end: new Date(d.end) ,\r\n                }\r\n            });\r\n            requests_cnt.value = count || 0;\r\n        }\r\n\r\n        _isPending.value = false;\r\n        return msg;\r\n    }\r\n\r\n    async function fetchRequestsForSchedule(location_id: number, startDate: Date, endDate: Date): Promise<string> {\r\n        if (_isPending.value || !profile.value) return 'Error:  Please try again';\r\n        _isPending.value = true;\r\n\r\n        let msg = '';\r\n\r\n        const start = new Date(startDate);\r\n        const end = new Date(endDate);\r\n\r\n        const { data, count, error } = await supabase\r\n            .from('request')\r\n            .select('id, created_by, created_at, modified_at, employee:employee_id(*), location:location_id(*), status, start, end, note', { count: 'exact', head: false })\r\n            .eq('location_id', location_id)\r\n            .neq('status', 3)\r\n            .lt('start', end.toISOString())\r\n            .gt('end', start.toISOString())\r\n            .order('employee(fname)', { ascending: true })\r\n            .order('start', { ascending: true });\r\n        \r\n        if (error) {\r\n            msg = error.message as string;\r\n        }\r\n        else if (data) {\r\n            requests.value = (data as Array<Req>).map(d => {\r\n                return {\r\n                    ...d,\r\n                    start: new Date(d.start),\r\n                    end: new Date(d.end) ,\r\n                }\r\n            });\r\n            requests_cnt.value = count || 0;\r\n        }\r\n\r\n        _isPending.value = false;\r\n        return msg;\r\n    }\r\n\r\n    async function addUpdateRequest(request: Req): Promise<string> {\r\n        if (_isPending.value) return 'Error:  Please try again';\r\n        _isPending.value = true;\r\n\r\n        let msg = '';\r\n        let query = null;\r\n\r\n        if (!request.id || request.id === 0) {\r\n            query = supabase\r\n                .from('request')\r\n                .insert([\r\n                    {\r\n                        created_by: profile.value.account_id,\r\n                        created_at: new Date().toISOString(),\r\n                        employee_id: request.employee.id,\r\n                        location_id: request.location.id,\r\n                        start: new Date(request.start).toISOString(),\r\n                        end: new Date(request.end).toISOString(),\r\n                        note: request.note\r\n                    }\r\n                ])\r\n                .select();\r\n        }\r\n        else {\r\n            query = supabase\r\n                .from('request')\r\n                .update([\r\n                    {\r\n                        modified_at: new Date().toISOString(),\r\n                        employee_id: request.employee.id,\r\n                        location_id: request.location.id,\r\n                        status: request.status,\r\n                        start: new Date(request.start).toISOString(),\r\n                        end: new Date(request.end).toISOString(),\r\n                        note: request.note\r\n                    }\r\n                ])\r\n                .eq('id', request.id)\r\n                .select();\r\n        }\r\n\r\n        const { error } = await query;\r\n\r\n        if (error) {\r\n            msg = error.message as string;\r\n        }\r\n\r\n        _isPending.value = false;\r\n        return msg;\r\n    }\r\n\r\n    /**\r\n     * Set the status of a request.\r\n     * \r\n     * @param {Req} request \r\n     * @param {number} status The status code [pending: 1, approved: 2, denied: 3]\r\n     */\r\n    async function setStatus(request: Req, status: number): Promise<string> {\r\n        if (_isPending.value) return 'Error:  Please try again';\r\n\r\n        status = Math.floor(status);\r\n        if (status < 1 || status > 3) return 'Invalid status.';\r\n\r\n        request.status = status;\r\n\r\n        return await addUpdateRequest(request);\r\n    }\r\n\r\n    async function deleteRequest(id: number) {\r\n        if (_isPending.value) return 'Error:  Please try again';\r\n        _isPending.value = true;\r\n\r\n        let msg = '';\r\n\r\n        const { error } = await supabase\r\n            .from('request')\r\n            .delete()\r\n            .eq('id', id);\r\n\r\n        if (error) {\r\n            msg = error.message as string;\r\n        }\r\n\r\n        _isPending.value = false;\r\n        return msg;\r\n    }\r\n\r\n    return {\r\n        blankRequest,\r\n        requests,\r\n        requests_cnt,\r\n        isPending,\r\n        isReqPending,\r\n        params,\r\n        statuses,\r\n        addUpdateRequest,\r\n        deleteRequest,\r\n        fetchRequests,\r\n        fetchRequestsForSchedule,\r\n        setStatus,\r\n        $reset\r\n    }\r\n});\r\n\r\nif (import.meta.hot) {\r\n    import.meta.hot.accept(acceptHMRUpdate(useRequestStore, import.meta.hot))\r\n}","import { ref, computed } from \"vue\";\r\nimport { defineStore } from \"pinia\";\r\nimport { useAppStore, useAuthStore, useRequestStore } from \"#imports\";\r\n\r\nexport const usePageStore = defineStore('pageStore', () => {\r\n    const { txt } = storeToRefs(useAppStore());\r\n    const authStore = useAuthStore();\r\n    const { currentLocationId, isManager, isMember, redeemedCodes } = storeToRefs(authStore);\r\n    const requestStore = useRequestStore();\r\n    const { isReqPending } = storeToRefs(requestStore);\r\n    const { fetchRequests } = requestStore;\r\n\r\n    fetchRequests(currentLocationId.value);\r\n\r\n    const _isPending = ref<boolean>(false);\r\n    const changesExist = ref<boolean>(false);\r\n    const isForceNav = ref<boolean>(false);\r\n    const isWarningShown = ref<boolean>(false);\r\n    const tempNavTo = ref<Object | null>(null);\r\n    const prevRoute = ref<string>('');\r\n    const pages = computed(() => [\r\n        {\r\n            title: txt.value.account,\r\n            id: 1,\r\n            icon: 'mdi-account-circle-outline',\r\n            to: '/account',\r\n            isShow: true\r\n        },\r\n        {\r\n           title: txt.value.schedules,\r\n           id: 2,\r\n           icon: 'mdi-calendar-blank-multiple',\r\n           to: '/schedules',\r\n           isShow: isMember.value && redeemedCodes.value.length > 0\r\n        },\r\n        {\r\n           title: txt.value.setup,\r\n           id: 3,\r\n           icon: 'mdi-card-account-details-outline',\r\n           to: '/setup',\r\n           isShow: isManager.value && redeemedCodes.value.length > 0\r\n        },\r\n        {\r\n           title: isReqPending.value ? `${txt.value.requests} ❗` : txt.value.requests,\r\n           id: 4,\r\n           icon: 'mdi-email-multiple-outline',\r\n           to: '/request',\r\n           isShow: isMember.value && redeemedCodes.value.length > 0\r\n        },\r\n        {\r\n           title: txt.value.support,\r\n           id: 5,\r\n           icon: 'mdi-frequently-asked-questions',\r\n           to: '/support',\r\n           isShow: isMember.value\r\n        }\r\n    ]);\r\n\r\n    const isPending = computed(() => { return _isPending.value });\r\n\r\n    function $reset(): void {\r\n        changesExist.value = false;\r\n        isForceNav.value = false;\r\n        isWarningShown.value = false;\r\n        tempNavTo.value = null;\r\n        _isPending.value = false;\r\n    }\r\n\r\n    return {\r\n        pages, changesExist, isForceNav, isWarningShown, tempNavTo, isPending, prevRoute,\r\n        $reset\r\n    }\r\n});\r\n\r\nif (import.meta.hot) {\r\n    import.meta.hot.accept(acceptHMRUpdate(usePageStore, import.meta.hot))\r\n}"],"names":["useRequestStore","defineStore","txt","storeToRefs","useAppStore","active_emp_id","isManager","profile","useAuthStore","_isPending","ref","isReqPending","requests","requests_cnt","statuses","computed","isPending","params","startIndex","endIndex","blankRequest","tomorrow","start","end","$reset","fetchRequests","location_id","msg","pendingReqCnt","supabase","query","data","count","error","d","fetchRequestsForSchedule","startDate","endDate","addUpdateRequest","request","setStatus","status","deleteRequest","id","usePageStore","authStore","currentLocationId","isMember","redeemedCodes","requestStore","changesExist","isForceNav","isWarningShown","tempNavTo","prevRoute","pages"],"mappings":"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"}