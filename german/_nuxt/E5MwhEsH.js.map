{"version":3,"file":"E5MwhEsH.js","sources":["../../../../components/Login/RequestReset.vue","../../../../components/Login/Form.vue","../../../../pages/login/index.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\n    import { useAppStore, useAuthStore } from '#imports';\r\n    import { useFormRules } from '~/composables/useFormRules';\r\n\r\n    const state = reactive({\r\n        resolve: (val: boolean) => {},\r\n        reject: (val: boolean) => {}\r\n    });\r\n\r\n    /* Store variables */\r\n    const { txt } = storeToRefs(useAppStore());\r\n    const authStore = useAuthStore();\r\n    const { isPending } = storeToRefs(authStore);\r\n    const { recoverPassword } = authStore;\r\n    const { emailRequired } = useFormRules();\r\n\r\n    /* Private variables */\r\n    const _dialog = ref<boolean>(false);\r\n    const _email = ref<string>('');\r\n    const _errorMsg = ref<string>('');\r\n    const _failureConfirmed = ref<boolean>(false);\r\n    const _successConfirmed = ref<boolean>(false);\r\n\r\n    /* UI references */\r\n    const form = ref<HTMLFormElement>();\r\n\r\n    /**\r\n     * Open the request password reset dialog.\r\n     * \r\n     * @param {string} email The E-mail address for which the password reset is being requested.\r\n     */\r\n    async function open (email: string): Promise<boolean> {\r\n        _dialog.value = true;\r\n        _email.value = email;\r\n        _failureConfirmed.value = false;\r\n        _successConfirmed.value = false;\r\n\r\n        return new Promise<boolean>((resolve, reject) => {\r\n            state.resolve = resolve;\r\n            state.reject = reject;\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Send a password reset E-mail based on the form data.\r\n     */\r\n    async function send(): Promise<void> {\r\n        if (!form.value) return;\r\n        \r\n        const { valid } = await form.value.validate();\r\n        if (!valid) return;\r\n\r\n        _errorMsg.value = await recoverPassword(_email.value);\r\n\r\n        _successConfirmed.value = _errorMsg.value === '';\r\n        _failureConfirmed.value = !_successConfirmed.value;\r\n    }\r\n\r\n    /**\r\n     * Close the dialog and return the confirmation status.\r\n     * \r\n     * @param {boolean} confirm The dialog's confirmation status.\r\n     */\r\n     function close(confirm: boolean = false): void {\r\n        state.resolve(confirm);\r\n        _dialog.value = false;\r\n    }\r\n\r\n    /* Exposed methods and variables */\r\n    defineExpose({\r\n        open\r\n    });\r\n</script>\r\n\r\n<template>\r\n    <v-dialog\r\n        v-model=\"_dialog\"\r\n        width=\"auto\"\r\n        max-width=\"400\"\r\n        :persistent=\"isPending\">\r\n        <v-card\r\n            :title=\"txt.passwordDialog.title\"\r\n            :disabled=\"isPending\">\r\n            <v-expand-transition>\r\n                <div v-show=\"!_successConfirmed\">\r\n                    <v-card-text>\r\n                        <v-progress-linear indeterminate color=\"primary\" :style=\"isPending ? 'opacity: 1' : 'opacity: 0'\"/>\r\n                        <div class=\"mb-3\">\r\n                            {{ txt.passwordDialog.body }}\r\n                        </div>\r\n                        <v-form ref=\"form\"\r\n                            validate-on=\"submit\">\r\n                            <v-text-field\r\n                                :label=\"txt.email\"\r\n                                v-model=\"_email\"\r\n                                :rules=\"[emailRequired]\"\r\n                                @keydown.enter.exact.prevent=\"send\" />\r\n                            <v-expand-transition>\r\n                                <div v-show=\"_failureConfirmed\">\r\n                                    <p class=\"error-message\">\r\n                                        {{ _errorMsg }}\r\n                                    </p>\r\n                                </div>\r\n                            </v-expand-transition>\r\n                        </v-form>\r\n                    </v-card-text>\r\n                    <v-card-actions class=\"px-3\">\r\n                        <v-spacer />\r\n                        <v-btn\r\n                            color=\"primary\"\r\n                            :disabled=\"!_email || _email.length === 0\"\r\n                            :elevation=\"!_email || _email.length === 0 ? 0 : 4\"\r\n                            @click.stop=\"send\">\r\n                            {{ txt.send }}\r\n                        </v-btn>\r\n                        <v-btn \r\n                            density=\"compact\"\r\n                            :disabled=\"isPending\"\r\n                            color=\"secondary\"\r\n                            @click.stop=\"close\">\r\n                            {{ txt.cancel }}\r\n                        </v-btn>\r\n                    </v-card-actions>\r\n                </div>\r\n            </v-expand-transition>\r\n            <v-expand-transition>\r\n                <div v-show=\"_successConfirmed\">\r\n                    <v-card-text>\r\n                        {{ txt.passwordDialog.successMessage }} {{ _email }}.\r\n                    </v-card-text>\r\n                    <v-card-actions class=\"px-3\">\r\n                        <v-spacer />\r\n                        <v-btn\r\n                            color=\"primary\"\r\n                            elevation=\"4\"\r\n                            @click.stop=\"close\">\r\n                            {{ txt.ok }}\r\n                        </v-btn>\r\n                    </v-card-actions>\r\n                </div>\r\n            </v-expand-transition>\r\n        </v-card>\r\n    </v-dialog>\r\n</template>","<script setup lang=\"ts\">\r\n    import {\r\n        useAppStore,\r\n        useAuthStore } from '#imports';\r\n    import { useFormRules } from '~/composables/useFormRules';\r\n\r\n    /* Store variables */\r\n    const { brandIcon, siteName } = storeToRefs(useAppStore());\r\n    const authStore = useAuthStore();\r\n    const { isLoggedIn } = storeToRefs(authStore);\r\n    const { fetchProfile, logIn } = authStore;\r\n    const { emailRequired, required } = useFormRules();\r\n\r\n    /* Private variables */\r\n    const _email = ref<string>('');\r\n    const _errorMsg = ref<string>('');\r\n    const _failureConfirmed = ref<boolean>(false);\r\n    const _password = ref<string>('');\r\n\r\n    /* UI references */\r\n    const form = ref<HTMLFormElement>();\r\n    const requestReset = ref<HTMLElement>();\r\n\r\n    /**\r\n     * Log into an account based on the form data.\r\n     */\r\n    async function attemptLogIn(): Promise<void> {\r\n        if (!form.value) return;\r\n\r\n        const { valid } = await form.value.validate();\r\n        if (!valid) return;\r\n\r\n        _errorMsg.value = await logIn(_email.value, _password.value);\r\n        _failureConfirmed.value = _errorMsg.value !== '';\r\n\r\n        if (_failureConfirmed.value) return;\r\n\r\n        _errorMsg.value = await fetchProfile();\r\n        _failureConfirmed.value = _errorMsg.value !== '';\r\n\r\n        if (_failureConfirmed.value) return;\r\n\r\n        await navigateTo('/account');\r\n    }\r\n\r\n    /**\r\n     * Open the request password reset dialog.\r\n     */\r\n    function openRequestResetDialog(): void {\r\n        if (requestReset.value) {\r\n            const dialog = <any>requestReset.value;\r\n            dialog.open();\r\n        }\r\n    }\r\n</script>\r\n\r\n<template>\r\n    <div class=\"text-center my-6\">\r\n        <v-icon :icon=\"brandIcon\" size=\"64\" color=\"primary\" />\r\n    </div>\r\n    <v-card\r\n        class=\"mx-auto\"\r\n        :class=\"$vuetify.display.mobile ? 'rounded-0' : ''\"\r\n        width=\"400\"\r\n        :disabled=\"isLoggedIn\">\r\n        <v-toolbar \r\n            title=\"Log In\"\r\n            class=\"px-3\"\r\n            color=\"surface\"\r\n            density=\"compact\" />\r\n        <v-card-text>\r\n            <v-form ref=\"form\"\r\n                validate-on=\"submit\">\r\n                <v-col>\r\n                    <v-row>\r\n                        <v-text-field\r\n                            label=\"E-mail\"\r\n                            v-model=\"_email\"\r\n                            :rules=\"[emailRequired]\"\r\n                            @keydown.enter.exact.prevent=\"attemptLogIn\" />\r\n                    </v-row>\r\n                    <v-row\r\n                        class=\"ga-2 align-center\">\r\n                        <v-text-field\r\n                            label=\"Password\"\r\n                            v-model=\"_password\"\r\n                            type=\"password\"\r\n                            :rules=\"[required]\"\r\n                            @keydown.enter.exact.prevent=\"attemptLogIn\" />\r\n                        <v-btn\r\n                            class=\"text-caption my-0 px-2\"\r\n                            color=\"primary\"\r\n                            variant=\"text\"\r\n                            @click=\"openRequestResetDialog\">\r\n                            Forgot Password\r\n                        </v-btn>\r\n                    </v-row>\r\n                </v-col>\r\n                <v-expand-transition>\r\n                    <div v-show=\"_failureConfirmed\">\r\n                        <p class=\"error-message\">\r\n                            {{ _errorMsg.replace('Email', 'E-mail') }}\r\n                        </p>\r\n                    </div>\r\n                </v-expand-transition>\r\n            </v-form>\r\n        </v-card-text>\r\n        <div class=\"pa-3\">\r\n            <v-btn \r\n                class=\"w-100\"\r\n                color=\"primary\"\r\n                @click=\"attemptLogIn\">\r\n                Log In\r\n            </v-btn>\r\n        </div>\r\n        <!--\r\n        <div class=\"text-body-2 text-center\">\r\n            New to {{ siteName }}?\r\n            <br>\r\n            <v-btn\r\n                class=\"text-body-2 my-0\"\r\n                color=\"primary\"\r\n                variant=\"text\"\r\n                nuxt\r\n                to=\"/createaccount\">\r\n                Create an Account\r\n            </v-btn>\r\n        </div>\r\n        -->\r\n        <div class=\"text-body-2 text-center color-secondary pb-3\">\r\n            {{ siteName }} is currently in development.\r\n            <br>\r\n            At the moment it is not possible to create an account.\r\n        </div>\r\n    </v-card>\r\n    <LoginRequestReset ref=\"requestReset\"/>\r\n</template>","<script setup lang=\"ts\">\r\n    import { LoginForm } from '#components';\r\n    import { useAuthStore } from '#imports';\r\n\r\n    const { isRedirect, isReload } = storeToRefs(useAuthStore());\r\n\r\n    definePageMeta({\r\n        layout: 'no-nav',\r\n        middleware: ['auth']\r\n    });\r\n    \r\n    onMounted(() => {\r\n        if (isRedirect.value) {\r\n            if (isReload.value) {\r\n                isReload.value = false;\r\n                reloadNuxtApp();\r\n            }\r\n\r\n            console.error('Your session expired. Please log in again.');\r\n        }\r\n    });\r\n</script>\r\n\r\n<template>\r\n    <div>\r\n        <LoginForm />\r\n    </div>\r\n</template>"],"names":["state","reactive","val","txt","storeToRefs","useAppStore","authStore","useAuthStore","isPending","recoverPassword","emailRequired","useFormRules","_dialog","ref","_email","_errorMsg","_failureConfirmed","_successConfirmed","form","open","email","resolve","reject","send","valid","close","confirm","__expose","brandIcon","siteName","isLoggedIn","fetchProfile","logIn","required","_password","requestReset","attemptLogIn","navigateTo","openRequestResetDialog","isRedirect","isReload","onMounted","reloadNuxtApp"],"mappings":"0qBAII,MAAMA,EAAQC,EAAS,CACnB,QAAUC,GAAiB,CAAC,EAC5B,OAASA,GAAiB,CAAA,CAAC,CAC9B,EAGK,CAAE,IAAAC,CAAA,EAAQC,EAAYC,GAAa,EACnCC,EAAYC,EAAa,EACzB,CAAE,UAAAC,CAAA,EAAcJ,EAAYE,CAAS,EACrC,CAAE,gBAAAG,GAAoBH,EACtB,CAAE,cAAAI,CAAc,EAAIC,EAAa,EAGjCC,EAAUC,EAAa,EAAK,EAC5BC,EAASD,EAAY,EAAE,EACvBE,EAAYF,EAAY,EAAE,EAC1BG,EAAoBH,EAAa,EAAK,EACtCI,EAAoBJ,EAAa,EAAK,EAGtCK,EAAOL,EAAqB,EAOlC,eAAeM,EAAMC,EAAiC,CAClD,OAAAR,EAAQ,MAAQ,GAChBE,EAAO,MAAQM,EACfJ,EAAkB,MAAQ,GAC1BC,EAAkB,MAAQ,GAEnB,IAAI,QAAiB,CAACI,EAASC,IAAW,CAC7CtB,EAAM,QAAUqB,EAChBrB,EAAM,OAASsB,CAAA,CAClB,CAAA,CAML,eAAeC,GAAsB,CAC7B,GAAA,CAACL,EAAK,MAAO,OAEjB,KAAM,CAAE,MAAAM,CAAM,EAAI,MAAMN,EAAK,MAAM,SAAS,EACvCM,IAELT,EAAU,MAAQ,MAAMN,EAAgBK,EAAO,KAAK,EAElCG,EAAA,MAAQF,EAAU,QAAU,GAC5BC,EAAA,MAAQ,CAACC,EAAkB,MAAA,CAQvC,SAAAQ,EAAMC,EAAmB,GAAa,CAC5C1B,EAAM,QAAQ0B,CAAO,EACrBd,EAAQ,MAAQ,EAAA,CAIP,OAAAe,EAAA,CACT,KAAAR,CAAA,CACH,otDChED,KAAM,CAAE,UAAAS,EAAW,SAAAC,CAAa,EAAAzB,EAAYC,GAAa,EACnDC,EAAYC,EAAa,EACzB,CAAE,WAAAuB,CAAA,EAAe1B,EAAYE,CAAS,EACtC,CAAE,aAAAyB,EAAc,MAAAC,CAAA,EAAU1B,EAC1B,CAAE,cAAAI,EAAe,SAAAuB,CAAS,EAAItB,EAAa,EAG3CG,EAASD,EAAY,EAAE,EACvBE,EAAYF,EAAY,EAAE,EAC1BG,EAAoBH,EAAa,EAAK,EACtCqB,EAAYrB,EAAY,EAAE,EAG1BK,EAAOL,EAAqB,EAC5BsB,EAAetB,EAAiB,EAKtC,eAAeuB,GAA8B,CACrC,GAAA,CAAClB,EAAK,MAAO,OAEjB,KAAM,CAAE,MAAAM,CAAM,EAAI,MAAMN,EAAK,MAAM,SAAS,EACvCM,IAELT,EAAU,MAAQ,MAAMiB,EAAMlB,EAAO,MAAOoB,EAAU,KAAK,EACzClB,EAAA,MAAQD,EAAU,QAAU,GAE1C,CAAAC,EAAkB,QAEZD,EAAA,MAAQ,MAAMgB,EAAa,EACnBf,EAAA,MAAQD,EAAU,QAAU,GAE1C,CAAAC,EAAkB,OAEtB,MAAMqB,GAAW,UAAU,GAAA,CAM/B,SAASC,GAA+B,CAChCH,EAAa,OACOA,EAAa,MAC1B,KAAK,CAChB,8jDChDJ,KAAM,CAAE,WAAAI,EAAY,SAAAC,CAAa,EAAApC,EAAYG,GAAc,EAO3D,OAAAkC,GAAU,IAAM,CACRF,EAAW,QACPC,EAAS,QACTA,EAAS,MAAQ,GACHE,GAAA,GAGlB,QAAQ,MAAM,4CAA4C,EAC9D,CACH"}